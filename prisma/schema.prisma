// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  groupId       Int?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  group         Group?    @relation(fields: [groupId], references: [id])

  role UserRole @default(user)

  createdAt DateTime @default(now())
}

model Group {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  User    User[]
  Address Address[]

  createdAt DateTime @default(now())
}

model Coordinate {
  id Int @id @default(autoincrement())

  latitude  Float
  longitude Float
  addresses Address[]

  @@unique([latitude, longitude], name: "coordinates")
}

model StockData {
  id                 Int       @id @default(autoincrement())
  ticker             String    // Ticker symbol of the underlying asset
  strikePrice        Float     // Strike price of the option
  expirationDate     DateTime  // Expiration date of the option
  contractType       String    // Type of the contract (call/put)
  exerciseStyle      String    // Exercise style (e.g., American)
  sharesPerContract  Int       // Number of shares per contract
  impliedVolatility  Float     // Implied volatility of the option
  openInterest       Int       // Open interest for the option
  createdAt          DateTime  @default(now()) // Timestamp for when the record was created

  // Optional fields for daily data
  change             Float?    // Daily change in price
  changePercent      Float?    // Daily change percentage
  close              Float?    // Closing price
  high               Float?    // Daily high price
  low                Float?    // Daily low price
  open               Float?    // Opening price
  previousClose      Float?    // Previous closing price
  volume             Int?      // Daily trading volume
  vwap               Float?    // Volume-weighted average price
}


model Address {
  id           Int  @id @default(autoincrement())
  coordinateId Int
  groupId      Int?

  street  String  @unique
  unit    String?
  city    String
  state   String
  zipCode String

  name             String?
  contact          String?
  status           VisitStatus @default(u)
  attendance       String?
  interested       Boolean?
  childrenK5InHome Boolean?
  notes            String?
  prayerRequest    String?
  updatedBy        String?     @default("SYSTEM")

  coordinates Coordinate @relation(fields: [coordinateId], references: [id])
  group       Group?     @relation(fields: [groupId], references: [id])
  visits      Visit[]

  createdAt DateTime @default(now())
}

model Visit {
  id        Int @id @default(autoincrement())
  addressId Int

  createdBy     String?
  status        VisitStatus
  name          String?
  contact       String?
  attendance    String?
  notes         String?
  prayerRequest String?
  interested    Boolean?
  childrenK5InHome Boolean?

  address   Address  @relation(fields: [addressId], references: [id])
  createdAt DateTime @default(now())
}

enum UserRole {
  owner
  admin
  user
}

enum VisitStatus {
  u
  a
  v
  f
  fu
  fc
  dnv
  pr
}
